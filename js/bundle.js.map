{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,yFAAyF;AACzF,kBAAkB,OAAO;AACzB,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,4EAA4E;AAC5E,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,cAAc,OAAO;AACrB,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACxHA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,2DAA2D;AAC3D;AACA,6CAA6C;AAC7C,6CAA6C;AAC7C,qDAAqD;AACrD,cAAc,OAAO;AACrB,qFAAqF;AACrF;AACA;AACA;AACA,gCAAgC,SAAS,SAAS,SAAS;AAC3D,sDAAsD,WAAW;AACjE,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,+CAA+C,IAAI,YAAY,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iCAAiC,OAAO;AACnE,6FAA6F;AAC7F;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,wBAAwB;AACxB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,+BAA+B;AAC/B;AACA;AACA,+DAA+D;AAC/D,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA,iDAAiD;AACjD;AACA,gFAAgF;AAChF;AACA;AACA,4BAA4B;AAC5B;AACA,kDAAkD;AAClD,uCAAuC;AACvC,aAAa;AACb,kDAAkD;AAClD,aAAa,kBAAkB;AAC/B,6BAA6B;AAC7B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E,+CAA+C;AAC/C,qBAAqB;AACrB;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,iCAAiC;AACjC,kDAAkD;AAClD,sDAAsD;AACtD,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;ACzFA;AACA;AACA;AACA,kDAAkD;AAClD,mEAAmE;AACnE;AACA;AACA;AACA;AACA,iDAAiD;AACjD,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sEAAsE;AACtE;AACA;AACA,KAAK;AACL;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,wBAAwB;AACxB,oBAAoB;AACpB;AACA;AACA,gCAAgC,cAAc;AAC9C,kCAAkC,WAAW;AAC7C,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mCAAmC;AACnC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA,kEAAkE;AAClE,wBAAwB;AACxB,UAAU,OAAO;AACjB,wCAAwC;AACxC;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA,4BAA4B;AAC5B,UAAU,OAAO;AACjB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,6DAA6D;AAC7D,UAAU,OAAO;AACjB,wCAAwC;AACxC;AACA;AACA,qDAAqD,OAAO,MAAM;AAClE;AACA;AACA;AACA,wCAAwC;AACxC,UAAU,OAAO;AACjB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA,kCAAkC;AAClC;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;;;;;;;;;;ACrMA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,wCAAwC,sCAAsC,cAAc;AAC5F,mDAAmD,+BAA+B,gBAAgB;AAClG,SAAS;AACT;AACA;AACA,6DAA6D;AAC7D,SAAS;AACT;AACA;AACA,qCAAqC;AACrC,mDAAmD;AACnD,sDAAsD,gCAAgC,gBAAgB;AACtG,iDAAiD;AACjD,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qEAAqE;AACrE,wCAAwC;AACxC,sCAAsC;AACtC;AACA,uCAAuC;AACvC;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B,UAAU;AACV;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UClEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb;AACA;AACA,iBAAiB,mBAAO,CAAC,4CAAgB;AACzC,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,iBAAiB,mBAAO,CAAC,4CAAgB;AACzC,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,mBAAmB,mBAAO,CAAC,gDAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://food_dist/./js/modules/calc.js","webpack://food_dist/./js/modules/cards.js","webpack://food_dist/./js/modules/forms.js","webpack://food_dist/./js/modules/modal.js","webpack://food_dist/./js/modules/slider.js","webpack://food_dist/./js/modules/tabs.js","webpack://food_dist/./js/modules/timer.js","webpack://food_dist/webpack/bootstrap","webpack://food_dist/./js/script.js"],"sourcesContent":["function calc() {\r\n    //----------------------------calc\r\n\r\n    const result = document.querySelector('.calculating__result span');\r\n    // Устанвливаем дефолтные значения sex и ratio чтобы при первом запуске было какое-то начальное значение\r\n    let sex, height, weight, age, ratio;\r\n\r\n    // Условия для проверки данных находящихся в localStotage\r\n    if (localStorage.getItem('sex')) {\r\n        sex = localStorage.getItem('sex');\r\n    } else {\r\n        sex = 'female';\r\n        localStorage.setItem('sex', 'female');\r\n    }\r\n        \r\n    if (localStorage.getItem('ratio')) {\r\n            ratio = localStorage.getItem('ratio');\r\n    } else {\r\n            ratio = '1.375';\r\n        localStorage.setItem('ratio', '1.375');\r\n    }\r\n\r\n    // Функция которая будет делать элементы активными, если они есть в localStorage\r\n    function initLocalSettings(selector, activeClass) {\r\n        const elements = document.querySelectorAll(selector);\r\n\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass); // Очищаем класс активности\r\n            //Проверяем, есть ли в localStorage значения, и если есть то добавить активность\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass);\r\n            } \r\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n\r\n    //Функция которая занимается подсчетами с формулой\r\n    function calkTotal() {\r\n        if (!sex || !height || !weight || !age || !ratio) {\r\n            result.textContent = 'Ввели не все данные';\r\n            return;\r\n        } else {\r\n            if (sex === 'female') {\r\n                // округляем до сотых с помощью Math.round\r\n                result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n            } else {\r\n                result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n            }\r\n        }\r\n    }\r\n\r\n    calkTotal();\r\n\r\n    //Функция для получения значений со страницы\r\n    function getStaticInformation(selector, activeClass) {\r\n        // получение родителя элементов которые могут быть активными (кликать по ним).\r\n        const elements = document.querySelectorAll(selector);\r\n        // перебираем все элементы родителя и на каждый вешаем обработчик события\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (e) => {\r\n                // Если у элемента есть атрибут data-ratio то будут выполняться действия. Выбор активности на странице\r\n                if (e.target.getAttribute('data-ratio')) {\r\n                    ratio = +e.target.getAttribute('data-ratio'); // Значение активности, у элемента на который кликнули, присваивается в ratio\r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio')); // Запись данных в localStorage\r\n                } else { // Если нет атрибута data-ratio. Выбор пола\r\n                    sex = e.target.getAttribute('id'); // присваивание в sex атрибута male или female\r\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\r\n                }\r\n                // Удаляем класс активности у всех элементов\r\n                elements.forEach(elem => {\r\n                    elem.classList.remove(activeClass);\r\n                });\r\n                // Добавляем класс активности на тот элемент, на котором произошло событие\r\n                e.target.classList.add(activeClass);\r\n    \r\n                calkTotal();\r\n            });\r\n        });\r\n    }\r\n\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active'); //# gender - родитель переключателей пола. Второй аргумент класс активности\r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active'); // calculating__choose_big - второй класс родителя всех переключателей активности\r\n\r\n    // Функция которая будет обрабатывать каждый отдельный input\r\n    function getDynamicInformation (selector) {\r\n        const input = document.querySelector(selector);\r\n        // обработчик события на input - что ввел пользователь\r\n        input.addEventListener('input', () => {\r\n            // Если пользователь в инпуте ввел не число\r\n            if (input.value.match(/\\D/g)) {\r\n                input.style.border = '1px solid red'; // Контур инпута покрасится в красный\r\n            } else { // Если ввел число\r\n                input.style.border = 'none'; // Красный контур удаляется\r\n            }\r\n\r\n            // Определение по идентификатору\r\n            switch(input.getAttribute('id')) {\r\n                case 'height': // Если идентификатор height тогда\r\n                    height = +input.value; // присваиваем переменной значение что ввел пользователь\r\n                    break;\r\n                case 'weight':\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age':\r\n                    age = +input.value;\r\n                    break;\r\n            }\r\n            calkTotal();\r\n        });\r\n    }\r\n    getDynamicInformation ('#height');\r\n    getDynamicInformation ('#weight');\r\n    getDynamicInformation ('#age');\r\n}\r\n\r\nmodule.exports = calc;","function cards() {\r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) { // ...classes будущие параметры которые будут в []\r\n            this.src = src;\r\n            this.alt = alt;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.price = price;\r\n            this.classes = classes; // это массив из будущих приходящих аргументов новых свойств \r\n            this.parent = document.querySelector(parentSelector); // Родитель, куда будет идти передача нового элемента. Родитель карт\r\n            this.transfer = 27;\r\n            this.changeToRUB();\r\n        }\r\n\r\n        changeToRUB() {\r\n            this.price = this.price * this.transfer;\r\n        }\r\n\r\n        render() { // Метод который будет информацию помещать на страницу\r\n            const element = document.createElement('div'); //создаем новый div для новых карт\r\n            \r\n            if (this.classes.length === 0) { // Если (if) у этого(this) массива(classes) длинна (length) равна (===) 0, тогда\r\n                this.element = 'menu__item'; // этому (this) div (element) приваивается класс 'menu__item'\r\n                element.classList.add(this.element); // div (element) классам (classList) добавить (add) этот класс (this.element)\r\n            } else { // Если не были переданы ни одни классы, то они будут прописанны в ручную\r\n                this.classes.forEach(className => element.classList.add(className)); // className - Это каждый элемент из массива. Перебор из массива где element будет присваиваться class, которые будут в теге element ('div') \r\n            }\r\n            \r\n            element.innerHTML = ` \r\n                    <img src=\"${this.src}\" alt=\"${this.alt}\">\r\n                    <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                    <div class=\"menu__item-descr\">${this.descr}</div>\r\n                    <div class=\"menu__item-divider\"></div>\r\n                    <div class=\"menu__item-price\">\r\n                        <div class=\"menu__item-cost\">Цена:</div>\r\n                        <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n                    </div>\r\n            `;\r\n            this.parent.append(element); // Добавление нового измененного объекта на страницу\r\n        }\r\n    }\r\n\r\n    const getResourse = async (url) => {\r\n        const res = await fetch(url);\r\n\r\n        if (!res.ok) { // Если что-то пошло не так\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n    \r\n        return await res.json(); \r\n       };\r\n\r\n    getResourse('http://localhost:3000/menu') // Массив с объектами меню из сервера\r\n        .then(data => {\r\n            data.forEach(({img, altimg, title, descr, price}) => { // Перебираем со всех элементов массива, которые являются объектами значения их свойств с помощью деструктуризации\r\n                new MenuCard(img, altimg, title, descr, price, '.menu .container').render(); // передаем в метод который будет их подставлять в конструктор\r\n                // '.menu .container' это адрес родителя новых элементов parentSelector для конструктора\r\n            });\r\n        });\r\n}\r\n\r\nmodule.exports = cards;","function forms() {\r\n    //------------------------------------------form server\r\n\r\n    const forms = document.querySelectorAll('form');\r\n\r\n    const message = { // список сообщений при отправке формы пользователем\r\n        loading: 'img/form/spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжеимся',\r\n        failure: 'Что-то пошло не так...'\r\n    };\r\n\r\n    forms.forEach(item => { // Перебор псевдомассива с формами\r\n    bindPostData(item); // где каждая форма передается как аргумент в функцию\r\n    }); \r\n\r\n    // Функция Function Expression которая будет работать с данными от сервера. url - адрес сервера. data - данные с сервера\r\n    const postData = async (url, data) => {\r\n    const res = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \r\n            'Content-type': 'application/json' \r\n        },\r\n        body: data\r\n    });\r\n\r\n    return await res.json(); // Полученный промис от сервера, обработка данных в json формат\r\n\r\n    };\r\n\r\n    // Функция которая отвечает за постинг данных\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => {// e - событие которое сработает на каждой кнопке с формой\r\n            e.preventDefault();// отменяем станд.пов брауз., чтобы при отправке не перезагружался браузер\r\n\r\n            // Создание нового элемента (крестик), куда будет выводиться сообщение об отправке формы\r\n            let statusMessage = document.createElement('img'); // Изображение загрузки при отправке формы\r\n            statusMessage.src = message.loading; //Добавление атрибута src к картинке загрузки\r\n            // Добавление CSS стилей, которые применятся inline. Чтобы установить изображение по центру\r\n            statusMessage.style.cssText = `\r\n                display: block;\r\n                margin: 0 auto;\r\n            `;\r\n            form.insertAdjacentElement('afterend', statusMessage);// Добавление нового элемента. 1 арг - куда вставить 'afterend' - после формы \r\n\r\n            // Передача formData - это специальный объект, который позволяет из формы быстро сформировать\r\n            // данные которые заполнил пользователь\r\n            const formData = new FormData(form); // Собирает все данный с форм на странице\r\n\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));// Переводим данные в матрицу массивов, а далее наоборот из матрицы в объект и превращаем все это в JSON\r\n\r\n            postData('http://localhost:3000/requests', json) // Вернется промис в формате json\r\n            .then(data => { // data - данные которые возвращаются из промиса\r\n                console.log(data); \r\n                showThanksModal(message.success); // Когда данные были отправлены на сервер\r\n                statusMessage.remove();// Удаляет со страницы спрнер\r\n            }).catch(() => {\r\n                showThanksModal(message.failure); // Когда произошла какая-то ошибка\r\n            }).finally(() => { // Выполняется всегда после then или catch\r\n                form.reset();// очистка форм, чтобы после ввода и отправки очищался input\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    // Создание окна в котором будет писаться сообщение о статусе отправки формы\r\n    function showThanksModal(message) {\r\n        const prevModalDialog = document.querySelector('.modal__dialog'); // Модальное окно, которое уже есть в HTML \r\n        prevModalDialog.classList.add('hide'); //Добавляем класс который скрывает из CSS\r\n        openModal(); // Функция которая отвечает за открытие модальных окон\r\n\r\n        const thanksModal = document.createElement('div');\r\n        thanksModal.classList.add('modal__dialog'); // добавляем класс который был в CSS новому элементу (чтобы они выглядели одинаково, так как перадаются все CSS стили)\r\n        thanksModal.innerHTML = `\r\n            <div class=\"modal__content\">\r\n                <div class=\"modal__close\" data-close>×</div>\r\n                <div class=\"modal__title\">${message}</div>\r\n            </div>\r\n        `;\r\n\r\n        document.querySelector('.modal').append(thanksModal); // добавляем в элемент modal новый div\r\n        setTimeout(() => {\r\n            thanksModal.remove();// Удаление нашего div через 4 сек gjckt njuj rfr jnhf,jnftn aeyrwbz\r\n            prevModalDialog.classList.add('show');// Добалвяем класс\r\n            prevModalDialog.classList.remove('hide'); // Удаляем класс невидимости\r\n            closeModal(); // ЧТобы пользователь не видел как удаляется модальное окно\r\n        }, 4000);\r\n    }\r\n}\r\n\r\nmodule.exports = forms;","function modal() {\r\n        //---------------------------------------------------------------modal----------------------------------------------\r\n    const modalTrigger = document.querySelectorAll('[data-modal]'), // расширение data-modal написали в HTML документе всем кнопакам для открытия модальных окан\r\n        modal = document.querySelector('.modal'); // само моадльное коно\r\n        // modalCloseBtn = document.querySelector('[data-close]'); // дописали modal-close кнопке (крестик на модальном окне) которая закрывает модальное окно\r\n\r\n    function openModal() {\r\n        modal.classList.add('show');\r\n        modal.classList.remove('hide');\r\n        document.body.style.overflow = 'hidden'; // Чтобы при открытии модального окна нельзя было скролить старницу\r\n        clearInterval(modalTimerId); // Если пользователь сам открыл модальное окно, то оно не откроемся через таймер\r\n    }\r\n\r\n    function closeModal() {\r\n        modal.classList.add('hide');\r\n        modal.classList.remove('show');\r\n        document.body.style.overflow = ''; //Чтобы после закрытии модального окна можно было скролить старницу\r\n    }\r\n    //Обработчик события на открытие всех модальных окон на странице\r\n    modalTrigger.forEach((item) => {\r\n        item.addEventListener('click', openModal);\r\n    });\r\n    //Обработчик события закрытия модального окна, если пользователь нажал на крести на модальном одке\r\n    // modalCloseBtn.addEventListener('click', closeModal);\r\n    //Обработчик события для закрытия модального окна, если пользователь нажал мимо модального окна\r\n    modal.addEventListener('click', (e) => {\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') { //Если событие(е) на котором оно произошло (target) произошло самомму модальному окну (modal)\r\n            // ИЛИ у события (e) на котором оно произошло(target) есть атрибут data-close (getAttribute('data-close')) который равен пустой строке\r\n            closeModal();\r\n        }\r\n    });\r\n    // Обработчик события закрытия моадльного окна если пользователь нажал ESC\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Escape' && modal.classList.contains('show')) {//Если пользователь нажал ESC\r\n            closeModal();\r\n        }\r\n    });\r\n\r\n    const modalTimerId = setTimeout(openModal, 5000000); //через 50 сек выходит модальное окно\r\n    //Функция когда пользователь долистал до конца сраницы и открывается модальное окно\r\n    //pageYOffset - показывает прокрученную часть сайта пользователем/ document.documentElement.clientHeight - видимая на данный момент чать страницы\r\n    //без прокрутки. document.documentElement.scrollHeight - максимальная длинна всей страницы\r\n    function showModalByScroll() {\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) { \r\n            openModal();\r\n            window.removeEventListener('scroll', showModalByScroll); //Сработает всего однажды когда пользователь долистая=ет до конца страницы\r\n        }\r\n    }\r\n    //Обработчик события на открытие модального окна, если пользователь долистал до конца страицы\r\n    window.addEventListener('scroll', showModalByScroll);\r\n}\r\n\r\nmodule.exports = modal;","function slider() {\r\n    // //--------------------------------------slide point\r\n\r\n    const slides = document.querySelectorAll('.offer__slide'),\r\n        slider = document.querySelector('.offer__slider'), // Родитель всего элемента где слайды\r\n        prew = document.querySelector('.offer__slider-prev'),\r\n        next = document.querySelector('.offer__slider-next'),\r\n        total = document.querySelector('#total'),\r\n        current = document.querySelector('#current'),\r\n        slidesWrapper = document.querySelector('.offer__slider-wrapper'), // Родитель слайдов\r\n        slidesField = document.querySelector('.offer__slider-inner'), // Элемент, где будет видно все слайды\r\n        width = window.getComputedStyle(slidesWrapper).width; // Размеры окна элемента где находятся слайды\r\n\r\n    let slideIndex = 1; // Индекс который определяет текущее положение в слайдере. Изначально он равен 1\r\n    let offset = 0; // Переменная куда будет записываться значение отступа в стороны\r\n\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`;\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        total.textContent = slides.length;\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n    // Помещаем все слайды в slidesField. 100% умноженное на количество слайдов - общая длинна рулетки слайдов\r\n    slidesField.style.width = 100 * slides.length + '%'; \r\n    //С помощью CSS стиля flex делаем так, чтобы слаыйды были горизонтально\r\n    slidesField.style.display = 'flex';\r\n    //Добавление анимации для плавной прокрутки слайдов\r\n    slidesField.style.transition = '0.5s all';\r\n    // Скрываем те элементы которые не попадают в область видимости. Чтобы было видно один, а остальные скрывались\r\n    slidesWrapper.style.overflow = 'hidden';\r\n    // ЧТобы у всех слайдов была одинаковая ширина. Переберем все слайды и каждому слайду установим определенную ширину width - окна где они показываются на странице\r\n    slides.forEach(slide => {\r\n        slide.style.width = width;\r\n    });\r\n    //Все элементы которые абсолютно спозициированны внутри слайдера будут нормально отображаться\r\n    slider.style.position = 'relative';\r\n    //Большая обертка для всех точек (ol) - order list\r\n    const indicators = document.createElement('ol'),\r\n        dots = []; // Массив куда будут добавляться все точки\r\n\r\n    indicators.classList.add('carouser-indicators');\r\n    indicators.style.cssText = `\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 15;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-right: 15%;\r\n        margin-left: 15%;\r\n        list-style: none;\r\n    `;\r\n    slider.append(indicators);\r\n\r\n    // Создаем количество точек.ю относительно колличеству слайдов\r\n    for (let i = 0; i < slides.length; i++) {\r\n        const dot = document.createElement('li'); // li - элемент - точка\r\n        // Каждой точке будет устанавливаться атрибут data-slide-to(к какому слайду она будет относится), и устанавливать нумераци.\r\n        // Начиная с еденицы. Потому что первый слайд - это первая точка\r\n        dot.setAttribute('data-slide-to', i + 1);\r\n        dot.style.cssText = `\r\n            box-sizing: content-box;\r\n            flex: 0 1 auto;\r\n            width: 30px;\r\n            height: 6px;\r\n            margin-right: 3px;\r\n            margin-left: 3px;\r\n            cursor: pointer;\r\n            background-color: #fff;\r\n            background-clip: padding-box;\r\n            border-top: 10px solid transparent;\r\n            border-bottom: 10px solid transparent;\r\n            opacity: .5;\r\n            transition: opacity .6s ease;\r\n        `;\r\n        // Добавляем знак активности\r\n        if (i == 0) { // Если идет первая итерация\r\n            dot.style.opacity = 1; // Первая точка будет активна. opacity - непрозрачность, гду 1 непрозрачный 0 прозрачный\r\n        }\r\n\r\n        indicators.append(dot);\r\n        dots.push(dot); // Добавляем в массив dots все точки\r\n    }\r\n    // Функция которая будет приобразовывать в числовой тип данных и заменять все не числа пустой строкой\r\n    function deleteStr(str) {\r\n       return +str.replace(/\\D/g, '');\r\n    }\r\n    //Функция добавляющая ноль к не десятичному числу\r\n    const getZeroNumbers = () => {       \r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n    };\r\n    // Функция которая делает все доты полупрозрачными кроме активной\r\n    const dotsOpacity = (i) => {\r\n        i.forEach(dot => {\r\n            dot.style.opacity = '.5'; \r\n            // Делаем слайд непрозрачным\r\n            dots[slideIndex - 1].style.opacity = 1;\r\n        });\r\n    };\r\n    // translateX - трансформирование по оси Х `- ${offset}` сдвиг вправо\r\n    next.addEventListener('click', () => {\r\n        // +width.slice(0, width.length - 2) =  в width будет записываться строчные данные Для CSS (500px). Переводим их в числовые\r\n        // Методом replace() заменить все нечисла пустой строкой\r\n        if (offset == (deleteStr(width) * (slides.length - 1))) { // Если значение отступа равно длинне слайда * на кол-во слайдов -1\r\n            offset = 0; // Долистали до самого конца и вернулись в начало\r\n        } else { // Если не последний слайд\r\n            offset += deleteStr(width); // Добавим смещение\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n        // Если Значение индекса равен количеству слайдов - дошли до конца,\r\n        if (slideIndex == slides.length) { \r\n            slideIndex = 1; // То откроется первый слайд\r\n        } else { // Если не дошли до конца\r\n            slideIndex++; // Тогда индекс увеличить на еденицу\r\n        }\r\n        getZeroNumbers();\r\n        // Добавление 0 если индекс слайда меньше 10\r\n        // if (slides.length < 10) {\r\n        //     current.textContent = `0${slideIndex}`;\r\n        // } else {\r\n        //     current.textContent = slideIndex;\r\n        // }\r\n        dotsOpacity();\r\n        // // Перебираем массив со всеми точками и устанавливаем и значение opacity = .5 - непрозрачность\r\n        // dots.forEach(dot => dot.style.opacity = '.5'); \r\n        // // Делаем слайд непрозрачным\r\n        // dots[slideIndex - 1].style.opacity = 1;\r\n    });\r\n\r\n    prew.addEventListener('click', () => {\r\n        // +width.slice(0, width.length - 2) =  в width будет записываться строчные данные Для CSS (500px). Переводим их в числовые\r\n        // Методом функцией deleteStr заменить все нечисла пустой строкой\r\n        if (offset == 0) { // Долистали до самого начала\r\n            offset = deleteStr(width) * (slides.length - 1); // Формула для определения последнего слайда Вернуться на последний слайд\r\n        } else { // Если не первый слайд\r\n            offset -= deleteStr(width); //Вычтем смещение смещение\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`; // Определение смещения\r\n\r\n        // Если Значение индекса равен 1 - дошли до Начала,\r\n        if (slideIndex == 1) { \r\n            slideIndex = slides.length; // То откроется последний слайд\r\n        } else { // Если не дошли до начала\r\n            slideIndex--; // Тогда индекс уменьшить на еденицу\r\n        }\r\n        // Определение текущего слайда\r\n        // Добавление 0 если индекс слайда меньше 10\r\n        getZeroNumbers();\r\n        // if (slides.length < 10) {\r\n        //     current.textContent = `0${slideIndex}`;\r\n        // } else {\r\n        //     current.textContent = slideIndex;\r\n        // }\r\n        dotsOpacity();\r\n        // dots.forEach(dot => dot.style.opacity = '.5'); \r\n        // // Делаем слайд непрозрачным\r\n        // dots[slideIndex - 1].style.opacity = 1;\r\n    });\r\n\r\n    // Кликаем на точку и переключаемся между слайдами\r\n\r\n    dots.forEach(dot => {\r\n        dot.addEventListener('click', (e) => {\r\n            // У каждой из точек есть атрибут 'data-slide-to', который мы получаем и на него будем ориентироваться \r\n            const slideTo = e.target.getAttribute('data-slide-to'); //e.target - тот элемент на котором было совершено событие\r\n\r\n            slideIndex = slideTo; // Кликнули на 4 точку, в slideIndex присвоится 4 - откроется 4 картинка\r\n            offset = deleteStr(width) * (slideTo - 1);\r\n\r\n            slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n            // Определение текущего слайда\r\n            // Добавление 0 если индекс слайда меньше 10\r\n            getZeroNumbers();\r\n            // if (slides.length < 10) {\r\n            //     current.textContent = `0${slideIndex}`;\r\n            // } else {\r\n            //     current.textContent = slideIndex;\r\n            // }\r\n     \r\n            //Перебираем массив со всеми точками и устанавливаем и значение opacity = .5 - непрозрачность\r\n            dots.forEach(dot => dot.style.opacity = \".5\"); \r\n            // Делаем слайд непрозрачным\r\n            dots[slideIndex - 1].style.opacity = 1;\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = slider;","function tabs() {\r\n    const tabs = document.querySelectorAll('.tabheader__item'), //Слова из меню табов питания (Фитнес, Премиум, Постное, Сбалансированное)\r\n        tabsContent = document.querySelectorAll('.tabcontent'), //Описание каждого питания и картинка из табов\r\n        tabsParent = document.querySelector('.tabheader__items'); // Роидельский класс всего меню питания табов\r\n    \r\n\r\n    //Функция которая скрывает табы и удаляет класс активности\r\n    function hideTabContent() { \r\n        tabsContent.forEach((item) => {\r\n            // item.style.display = 'none'; // Скрываем все табы\r\n            item.classList.add('hide'); // Добавить из CSS стилей класс .hide{display:none} Скрывает\r\n            item.classList.remove('show', 'fade'); // Удалить из CSS стилей .show{display: block} Показать И удалить анимацию из CSS\r\n        });\r\n\r\n        tabs.forEach(item => {\r\n            item.classList.remove('tabheader__item_active'); // Удаляем класс активности\r\n        });\r\n    }\r\n    //Функция которая будет показывать активный таб (i)\r\n    function showTabContent(i = 0) { // Если аргумент i не будет передаваться, то аргументом станет 0, а это первый элемент\r\n        // tabsContent[i].style.display = 'block'; // Показывает выбраный таб\r\n        tabsContent[i].classList.add('show', 'fade'); // Добавить из CSS стилей .show{display: block} Показывает и fade анимация из CSS\r\n        tabsContent[i].classList.remove('hide'); // Удаленние класса из CSS стилей\r\n        tabs[i].classList.add('tabheader__item_active'); // Добавляет класс к элементу\r\n    }\r\n\r\n    hideTabContent();\r\n    showTabContent();\r\n\r\n    tabsParent.addEventListener('click', (event) => {\r\n        const target = event.target; // присваиваем переменной event.target, чтобы потом каждый раз не писать это/ и это элемент на котором сработало событие\r\n\r\n        if (target && target.classList.contains('tabheader__item')) {// Условие для проверки, имеет ли событие в себе класс tabheader__item. Чтобы событие срабатывало именнно на этом элементе, а не на родителе\r\n            tabs.forEach((item, i) => { //item каждый таб который будет перебираться, а i его индекс\r\n                if (target == item) { //Если тот элемент на котором произошло событие(target) будет совпадать с элементом который сейчас перебирается (Item)\r\n                    hideTabContent();\r\n                    showTabContent(i); // Передаем в аргумент индекс того элемента, на котором сейчас произошло событие\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = tabs;","function timer() {\r\n        // ----------------------------------------------Timer\r\n\r\n    const deadLine = '2022-12-30';\r\n\r\n    // Функция которая будет определять разницу между deadLine и текущим времинем пользователя\r\n    function getTimeRemaining(endtime) {\r\n         const t = Date.parse(endtime) - Date.parse(new Date()); // Получаем кол-во мс из deadLine и вычитаем из реальной даты\r\n        let days, hours, minutes, seconds;\r\n        //Условие для того, чтобы когда кончится время акции появились нули\r\n        if (t <= 0) {\r\n            days = 0;\r\n            hours = 0;\r\n            minutes = 0;\r\n            seconds = 0;\r\n        } else {\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)), //Math.floor() - округляет до целых. Высчитываем кол-во дней\r\n            hours = Math.floor((t / (1000 * 60 * 60) % 24)), // % делит с остатком и возвращает остаток\r\n            minutes = Math.floor((t / 1000 / 60) % 60),\r\n            seconds = Math.floor((t / 1000) % 60);  \r\n        }\r\n        return {\r\n            'total': t, \r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n    }\r\n    //Функция котоорая будет подставлять 0 в часах если там 1 число (9 => 09)\r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n    // Функция которая будет устонавливать наш таймер на страницу\r\n    function setClock (selector, endtime) { // selector аргументом является div=\"timer\" в котором хранятся объекты с день, ч, мин, сек со станицы\r\n        const timer = document.querySelector(selector),\r\n            days = timer.querySelector('#days'),\r\n            hours = timer.querySelector('#hours'),\r\n            minutes = timer.querySelector('#minutes'),\r\n            seconds = timer.querySelector('#seconds'),\r\n            timeInterval = setInterval(updateClock, 1000); // Обновление цифр на странице через каждую секунду\r\n        \r\n        updateClock(); // Запуск функции для того, чтобы часы на странице обновились до того, как начнет работат setInterval()\r\n\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime);\r\n            //В объекты полученные со страницы через innerHTML меняем данными получеными из объекта который возвращает функция getTimeRemaining\r\n            \r\n            days.innerHTML = getZero(t.days);\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n\r\n            //Остановка setInterval тогда, когда разница во времени будет = 0\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n            }\r\n        }\r\n    }\r\n    setClock('.timer', deadLine);\r\n}\r\n\r\nmodule.exports = timer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const tabs = require('./modules/tabs'),\r\n          modal = require('./modules/modal'),\r\n          timer = require('./modules/timer'),\r\n          cards = require('./modules/cards'),\r\n          calc = require('./modules/calc'),\r\n          forms = require('./modules/forms'),\r\n          slider = require('./modules/slider');\r\n    \r\n    tabs();\r\n    modal();\r\n    timer();\r\n    cards();\r\n    calc();\r\n    forms();\r\n    slider();\r\n});"],"names":[],"sourceRoot":""}